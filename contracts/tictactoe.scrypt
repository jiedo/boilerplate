import "util.scrypt";

contract TicTacToe {
    PubKey alice;
    PubKey bob;

    static int TURNLEN = 1;
    static int BOARDLEN = 9;
    static bytes EMPTY = b'00';
    static bytes ALICE = b'01';
    static bytes BOB = b'02';

    public function move(int n, Sig sig, int amount, SigHashPreimage txPreimage) {
        require(Tx.checkPreimage(txPreimage));
        require(n >=0 && n < TicTacToe.BOARDLEN);

        bytes scriptCode = Util.scriptCode(txPreimage);
		int scriptLen = len(scriptCode);
		
        int boardStart = scriptLen - TicTacToe.BOARDLEN;
		// state: turn (1 byte) + board (9 bytes)
		int turn = unpack(scriptCode[boardStart - TicTacToe.TURNLEN : boardStart]);
		bytes board = scriptCode[boardStart : ];
        
        // not filled
        require(Util.getElemAt(board, n) == TicTacToe.EMPTY);

        bytes play = turn == 0 ? TicTacToe.ALICE : TicTacToe.BOB;
        PubKey player = turn == 0 ? this.alice: this.bob;
        
        // ensure it's player's turn
        require(checkSig(sig, player));
        // make the move
        board = Util.setElemAt(board, n, play);

        bytes outputs = b'';
        if (this.won(board, play)) {
            // winner takes all
            Ripemd160 playerPKH = ripemd160(sha256(player));
            bytes outputScript = Util.buildPublicKeyHashScript(playerPKH);
            bytes output = Util.buildOutput(outputScript, amount);
		    outputs = output;
        } else if (this.full(board)) {
            // draw: equally split, i.e., both outputs have the same amount
            Ripemd160 alicePKH = ripemd160(sha256(this.alice));
            bytes aliceScript = Util.buildPublicKeyHashScript(alicePKH);
            bytes aliceOutput = Util.buildOutput(aliceScript, amount);

            Ripemd160 bobPKH = ripemd160(sha256(this.bob));
            bytes bobScript = Util.buildPublicKeyHashScript(bobPKH);
            bytes bobOutput = Util.buildOutput(bobScript, amount);

            outputs = aliceOutput + bobOutput;
        } else {
            // update state: next turn & next board
            bytes scriptCode_ = scriptCode[: scriptLen - TicTacToe.BOARDLEN] + num2bin(1 - turn, TicTacToe.TURNLEN) + board;
            bytes output = Util.buildOutput(scriptCode_, amount);
            outputs = output;
        }

  		require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }

    // does play win after current move?
    function won(bytes board, bytes play): bool {
        // three in a row, a column, or a diagnoal
        return Util.getElemAt(board, 0) == play && Util.getElemAt(board, 1) == play && Util.getElemAt(board, 2) == play
            || Util.getElemAt(board, 3) == play && Util.getElemAt(board, 4) == play && Util.getElemAt(board, 5) == play
            || Util.getElemAt(board, 6) == play && Util.getElemAt(board, 7) == play && Util.getElemAt(board, 8) == play
            || Util.getElemAt(board, 0) == play && Util.getElemAt(board, 3) == play && Util.getElemAt(board, 6) == play
            || Util.getElemAt(board, 1) == play && Util.getElemAt(board, 4) == play && Util.getElemAt(board, 7) == play
            || Util.getElemAt(board, 2) == play && Util.getElemAt(board, 5) == play && Util.getElemAt(board, 8) == play
            || Util.getElemAt(board, 0) == play && Util.getElemAt(board, 4) == play && Util.getElemAt(board, 8) == play
            || Util.getElemAt(board, 2) == play && Util.getElemAt(board, 4) == play && Util.getElemAt(board, 6) == play;
    }

    // is board full?
    function full(bytes board): bool {
        bool full = true;
        int i = 0;

        loop (9) {
            if (full) {
                if (Util.getElemAt(board, i) == TicTacToe.EMPTY) {
                    full = false;
                }
            }
            i = i + 1;
        }

        return full;
    }
}